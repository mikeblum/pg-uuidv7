// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const generateSeries = `-- name: GenerateSeries :many

SELECT ts::timestamp FROM generate_series(
	date_trunc('day', now()::timestamp) - INTERVAL '1 year',
    now()::timestamp,
    INTERVAL '1 minute'
) AS ts
`

// casting resolves computation requirement
// https://github.com/sqlc-dev/sqlc/issues/1995
func (q *Queries) GenerateSeries(ctx context.Context) ([]pgtype.Timestamp, error) {
	rows, err := q.db.Query(ctx, generateSeries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Timestamp
	for rows.Next() {
		var ts pgtype.Timestamp
		if err := rows.Scan(&ts); err != nil {
			return nil, err
		}
		items = append(items, ts)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
